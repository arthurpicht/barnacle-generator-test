// DO NOT CHANGE THIS FILE MANUALLY!
package de.arthurpicht.barnacleGeneratorTest.tc_01.persistence.dao;

import de.arthurpicht.barnacleGeneratorTest.connectionManager.ConnectionManager;
import de.arthurpicht.barnacleGeneratorTest.connectionManager.DataSourceException;
import de.arthurpicht.barnacleGeneratorTest.connectionManager.EntityNotFoundException;
import de.arthurpicht.barnacleGeneratorTest.tc_04.persistence.vo.AutoIncVO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by Barnacle Version 0.3.0-SNAPSHOT (2023-02-12) on 24.02.2023 12:47:19
 * https://github.com/arthurpicht/Barnacle
 * created 2007 - 2023 by Arthur Picht, Düren and Düsseldorf, Germany
 *
 * DO NOT CHANGE THIS FILE MANUALLY!
 */
public class AutoIncDAOPrep {
	
	private static final Logger logger = LoggerFactory.getLogger(AutoIncDAOPrep.class);
	
	private static final String CREATE_STATEMENT = "INSERT INTO auto_inc (name) VALUES (?)";
	
	public static void create(AutoIncVO autoIncVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(AutoIncDAOPrep.class);
		try {
			create(autoIncVO, connection);
		} catch (SQLException sqlEx) {
			throw new DataSourceException(sqlEx);
		} finally {
			ConnectionManager.releaseConnection(connection, AutoIncDAOPrep.class);
		}
	}
	
	public static void create(AutoIncVO autoIncVO, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(CREATE_STATEMENT, Statement.RETURN_GENERATED_KEYS);
		preparedStatement.setString(1, autoIncVO.getName());
		logger.debug(CREATE_STATEMENT + " [" + autoIncVO.getName() + "]");
		preparedStatement.executeUpdate();
		ResultSet resultSet = preparedStatement.getGeneratedKeys();
		if (resultSet.next()) {
			int generatedKey = resultSet.getInt(1);
			autoIncVO.setId(generatedKey);
		} else {
			throw new SQLException("Could not obtain generated key for auto increment field.");
		}
		try { resultSet.close(); } catch (SQLException ignored) {}
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}

//	public static void create(List<AutoIncVO> autoIncVOList, Connection connection) throws SQLException {
//		PreparedStatement preparedStatement = connection.prepareStatement(CREATE_STATEMENT, Statement.RETURN_GENERATED_KEYS);
//		for (AutoIncVO autoIncVO : autoIncVOList) {
//			preparedStatement.setString(1, autoIncVO.getName());
//			logger.debug(CREATE_STATEMENT + " [" + autoIncVO.getName() + "]");
//			preparedStatement.addBatch();
//		}
//
//	}
	
	public static AutoIncVO load(int id) throws DataSourceException, EntityNotFoundException {
		Connection connection = ConnectionManager.openConnection(AutoIncDAOPrep.class);
		try {
			return load(id, connection);
		} catch(SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, AutoIncDAOPrep.class);
		}
	}
	
	public static AutoIncVO load(int id, Connection connection) throws SQLException, EntityNotFoundException {
		String sql = "SELECT * FROM " + AutoIncVO.TABLENAME + " WHERE "
			+ AutoIncVO.ID + " = " + getValueExpression(id, "INTEGER");
		logger.debug(sql);
		Statement statement = connection.createStatement();
		ResultSet resultSet = statement.executeQuery(sql);
		try {
			if (resultSet.next()) {
				AutoIncVO autoIncVO = new AutoIncVO(id);
				String name = resultSet.getString(AutoIncVO.NAME);
				autoIncVO.setName(name);
				return autoIncVO;
			} else {
				throw new EntityNotFoundException(AutoIncVO.TABLENAME + "-Entity with primary key field 'id' = " + id + " does not exist!");
			}
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException e) {}}
			if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
		}
	}
	
	public static void delete(int id) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(AutoIncDAOPrep.class);
		try {
			delete(id, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, AutoIncDAOPrep.class);
		}
	}
	
	public static void delete(int id, Connection connection) throws SQLException {
		String sql = "DELETE FROM " + AutoIncVO.TABLENAME + " WHERE "
			+ AutoIncVO.ID + " = " + getValueExpression(id, "INTEGER");
		logger.debug(sql);
		Statement statement = connection.createStatement();
		statement.execute(sql);
		if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
	}
	
	public static void update(AutoIncVO autoIncVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(AutoIncDAOPrep.class);
		try {
			update(autoIncVO, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, AutoIncDAOPrep.class);
		}
	}
	
	public static void update(AutoIncVO autoIncVO, Connection connection) throws SQLException {
		String sql = "UPDATE " + AutoIncVO.TABLENAME + " SET "
			+ AutoIncVO.NAME + " = " + getValueExpression(autoIncVO.getName(), "VARCHAR(255)")
			+ " WHERE "
			+ AutoIncVO.ID + " = " + getValueExpression(autoIncVO.getId(), "INTEGER");
		logger.debug(sql);
		Statement statement = connection.createStatement();
		statement.execute(sql);
		if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
	}
	
	public static List<AutoIncVO> findAll() throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(AutoIncDAOPrep.class);
		Statement statement = null;
		ResultSet resultSet = null;
		try {
			statement = connection.createStatement();
			String sql = "SELECT * FROM " + AutoIncVO.TABLENAME;
			logger.debug(sql);
			resultSet = statement.executeQuery(sql);
			List<AutoIncVO> autoIncVOList = new ArrayList<AutoIncVO>();
			while (resultSet.next()) {
				int id = resultSet.getInt(AutoIncVO.ID);
				String name = resultSet.getString(AutoIncVO.NAME);
				AutoIncVO autoIncVO = new AutoIncVO(id);
				autoIncVO.setName(name);
				autoIncVOList.add(autoIncVO);
			}
			return autoIncVOList;
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException e) {}}
			if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
			ConnectionManager.releaseConnection(connection, AutoIncDAOPrep.class);
		}
	}
	
	private static String getValueExpression(Object o, String sqlType) {
		if (o == null) { return "NULL"; }
		if (sqlType.startsWith("VARCHAR") || sqlType.equals("DATE")) { return "'" + o + "'"; }
		return "" + o;
	}
	
}
