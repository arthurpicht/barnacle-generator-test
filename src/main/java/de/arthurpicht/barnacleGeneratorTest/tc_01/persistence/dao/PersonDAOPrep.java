// DO NOT CHANGE THIS FILE MANUALLY!
package de.arthurpicht.barnacleGeneratorTest.tc_01.persistence.dao;

import de.arthurpicht.barnacleGeneratorTest.connectionManager.ConnectionManager;
import de.arthurpicht.barnacleGeneratorTest.connectionManager.DataSourceException;
import de.arthurpicht.barnacleGeneratorTest.connectionManager.EntityNotFoundException;
import de.arthurpicht.barnacleGeneratorTest.tc_01.persistence.vo.PersonVO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by Barnacle Version 0.3.0-SNAPSHOT (2023-02-12) on 24.02.2023 12:47:19
 * https://github.com/arthurpicht/Barnacle
 * created 2007 - 2023 by Arthur Picht, Düren and Düsseldorf, Germany
 *
 * DO NOT CHANGE THIS FILE MANUALLY!
 */
public class PersonDAOPrep {
	
	private static final Logger logger = LoggerFactory.getLogger(PersonDAOPrep.class);
	
	private static final String CREATE_STATEMENT = "INSERT INTO person (id, first_name, last_name) VALUES (?, ?, ?)";
	
	public static void create(PersonVO personVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(PersonDAOPrep.class);
		try {
			create(personVO, connection);
		} catch (SQLException sqlEx) {
			throw new DataSourceException(sqlEx);
		} finally {
			ConnectionManager.releaseConnection(connection, PersonDAOPrep.class);
		}
	}
	
	public static void create(PersonVO personVO, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(CREATE_STATEMENT);
		preparedStatement.setString(1, personVO.getId());
		preparedStatement.setString(2, personVO.getFirstName());
		preparedStatement.setString(3, personVO.getLastName());
		logger.debug(CREATE_STATEMENT + " [" + personVO.getId() + "][" + personVO.getFirstName() + "][" + personVO.getLastName() + "]");
		preparedStatement.executeUpdate();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static void create(List<PersonVO> personVOs) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(PersonDAOPrep.class);
		Statement statement = null;
		try {
			statement = connection.createStatement();
			for (PersonVO personVO : personVOs) {
				String sql="INSERT INTO " + PersonVO.TABLENAME + " ("
					+ PersonVO.ID + ", " 
					+ PersonVO.FIRSTNAME + ", " 
					+ PersonVO.LASTNAME + ") "
					+ "VALUES ("
					+ getValueExpression(personVO.getId(), "VARCHAR(255)") + ", "
					+ getValueExpression(personVO.getFirstName(), "VARCHAR(255)") + ", "
					+ getValueExpression(personVO.getLastName(), "VARCHAR(255)") + ")";
				logger.debug(sql);
				statement.addBatch(sql);
			}
			statement.executeBatch();
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
			ConnectionManager.releaseConnection(connection, PersonDAOPrep.class);
		}
	}
	
	public static PersonVO load(String id) throws DataSourceException, EntityNotFoundException {
		Connection connection = ConnectionManager.openConnection(PersonDAOPrep.class);
		try {
			return load(id, connection);
		} catch(SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, PersonDAOPrep.class);
		}
	}
	
	public static PersonVO load(String id, Connection connection) throws SQLException, EntityNotFoundException {
		String sql = "SELECT * FROM " + PersonVO.TABLENAME + " WHERE "
			+ PersonVO.ID + " = " + getValueExpression(id, "VARCHAR(255)");
		logger.debug(sql);
		Statement statement = connection.createStatement();
		ResultSet resultSet = statement.executeQuery(sql);
		try {
			if (resultSet.next()) {
				PersonVO personVO = new PersonVO(id);
				String firstName = resultSet.getString(PersonVO.FIRSTNAME);
				personVO.setFirstName(firstName);
				String lastName = resultSet.getString(PersonVO.LASTNAME);
				personVO.setLastName(lastName);
				return personVO;
			} else {
				throw new EntityNotFoundException(PersonVO.TABLENAME + "-Entity with primary key field 'id' = " + id + " does not exist!");
			}
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException e) {}}
			if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
		}
	}
	
	public static void delete(String id) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(PersonDAOPrep.class);
		try {
			delete(id, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, PersonDAOPrep.class);
		}
	}
	
	public static void delete(String id, Connection connection) throws SQLException {
		String sql = "DELETE FROM " + PersonVO.TABLENAME + " WHERE "
			+ PersonVO.ID + " = " + getValueExpression(id, "VARCHAR(255)");
		logger.debug(sql);
		Statement statement = connection.createStatement();
		statement.execute(sql);
		if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
	}
	
	public static void update(PersonVO personVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(PersonDAOPrep.class);
		try {
			update(personVO, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, PersonDAOPrep.class);
		}
	}
	
	public static void update(PersonVO personVO, Connection connection) throws SQLException {
		String sql = "UPDATE " + PersonVO.TABLENAME + " SET "
			+ PersonVO.FIRSTNAME + " = " + getValueExpression(personVO.getFirstName(), "VARCHAR(255)") + ", "
			+ PersonVO.LASTNAME + " = " + getValueExpression(personVO.getLastName(), "VARCHAR(255)")
			+ " WHERE "
			+ PersonVO.ID + " = " + getValueExpression(personVO.getId(), "VARCHAR(255)");
		logger.debug(sql);
		Statement statement = connection.createStatement();
		statement.execute(sql);
		if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
	}
	
	public static List<PersonVO> findAll() throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(PersonDAOPrep.class);
		Statement statement = null;
		ResultSet resultSet = null;
		try {
			statement = connection.createStatement();
			String sql = "SELECT * FROM " + PersonVO.TABLENAME;
			logger.debug(sql);
			resultSet = statement.executeQuery(sql);
			List<PersonVO> personVOList = new ArrayList<PersonVO>();
			while (resultSet.next()) {
				String id = resultSet.getString(PersonVO.ID);
				String firstName = resultSet.getString(PersonVO.FIRSTNAME);
				String lastName = resultSet.getString(PersonVO.LASTNAME);
				PersonVO personVO = new PersonVO(id);
				personVO.setFirstName(firstName);
				personVO.setLastName(lastName);
				personVOList.add(personVO);
			}
			return personVOList;
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException e) {}}
			if (statement != null) { try { statement.close(); } catch (SQLException e) {}}
			ConnectionManager.releaseConnection(connection, PersonDAOPrep.class);
		}
	}
	
	private static String getValueExpression(Object o, String sqlType) {
		if (o == null) { return "NULL"; }
		if (sqlType.startsWith("VARCHAR") || sqlType.equals("DATE")) { return "'" + o + "'"; }
		return "" + o;
	}
	
}
