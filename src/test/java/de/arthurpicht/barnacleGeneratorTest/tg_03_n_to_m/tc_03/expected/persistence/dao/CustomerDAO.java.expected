// DO NOT CHANGE THIS FILE MANUALLY!
package de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.dao;

import de.arthurpicht.barnacleGeneratorTest.connectionManager.ConnectionManager;
import java.util.List;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Types;
import de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.vo.CustomerVO;
import de.arthurpicht.barnacleGeneratorTest.connectionManager.DataSourceException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.vo.CustomerPK;
import de.arthurpicht.barnacleGeneratorTest.connectionManager.EntityNotFoundException;

public class CustomerDAO {
	
	private static final Logger logger = LoggerFactory.getLogger(CustomerDAO.class);
	
	private static final String CREATE_STATEMENT = "INSERT INTO customer (id_part_1, id_part_2, name) VALUES (?, ?, ?)";
	private static final String LOAD_STATEMENT = "SELECT * FROM customer WHERE id_part_1 = ? AND id_part_2 = ?";
	private static final String DELETE_STATEMENT = "DELETE FROM customer WHERE id_part_1 = ? AND id_part_2 = ?";
	private static final String UPDATE_STATEMENT = "UPDATE customer SET name = ? WHERE id_part_1 = ? AND id_part_2 = ?";
	private static final String FIND_ALL_STATEMENT = "SELECT * FROM customer";
	
	public static void create(CustomerVO customerVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerDAO.class);
		try {
			create(customerVO, connection);
		} catch (SQLException sqlEx) {
			throw new DataSourceException(sqlEx);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerDAO.class);
		}
	}
	
	public static void create(CustomerVO customerVO, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(CREATE_STATEMENT);
		preparedStatement.setObject(1, customerVO.getIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(2, customerVO.getIdPart2(), Types.VARCHAR);
		preparedStatement.setObject(3, customerVO.getName(), Types.VARCHAR);
		logger.debug(CREATE_STATEMENT + " [" + customerVO.getIdPart1() + "][" + customerVO.getIdPart2() + "][" + customerVO.getName() + "]");
		preparedStatement.executeUpdate();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static void create(List<CustomerVO> customerVOs) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerDAO.class);
		try {
			create(customerVOs, connection);
		} catch (SQLException sqlEx) {
			throw new DataSourceException(sqlEx);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerDAO.class);
		}
	}
	
	public static void create(List<CustomerVO> customerVOs, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(CREATE_STATEMENT);
		for (CustomerVO customerVO : customerVOs) {
			preparedStatement.setObject(1, customerVO.getIdPart1(), Types.VARCHAR);
			preparedStatement.setObject(2, customerVO.getIdPart2(), Types.VARCHAR);
			preparedStatement.setObject(3, customerVO.getName(), Types.VARCHAR);
			logger.debug(CREATE_STATEMENT + " [" + customerVO.getIdPart1() + "][" + customerVO.getIdPart2() + "][" + customerVO.getName() + "]");
			preparedStatement.addBatch();
		}
		preparedStatement.executeBatch();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static CustomerVO load(CustomerPK customerPK) throws DataSourceException, EntityNotFoundException {
		Connection connection = ConnectionManager.openConnection(CustomerDAO.class);
		try {
			return load(customerPK, connection);
		} catch(SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerDAO.class);
		}
	}
	
	public static CustomerVO load(CustomerPK customerPK, Connection connection) throws SQLException, EntityNotFoundException {
		PreparedStatement preparedStatement = connection.prepareStatement(LOAD_STATEMENT);
		preparedStatement.setObject(1, customerPK.getIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(2, customerPK.getIdPart2(), Types.VARCHAR);
		logger.debug(LOAD_STATEMENT + " [" + customerPK.getIdPart1() + "][" + customerPK.getIdPart2() + "]");
		ResultSet resultSet = preparedStatement.executeQuery();
		try {
			if (resultSet.next()) {
				CustomerVO customerVO = new CustomerVO(customerPK);
				customerVO.setName(resultSet.getObject("name", String.class));
				return customerVO;
			} else {
				throw new EntityNotFoundException("Entity 'customer' with primary key CustomerPK = [" + customerPK + "] not found!");
			}
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException ignored) {}}
			try { preparedStatement.close(); } catch (SQLException ignored) {}
		}
	}
	
	public static void delete(CustomerPK customerPK) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerDAO.class);
		try {
			delete(customerPK, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerDAO.class);
		}
	}
	
	public static void delete(CustomerPK customerPK, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(DELETE_STATEMENT);
		preparedStatement.setObject(1, customerPK.getIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(2, customerPK.getIdPart2(), Types.VARCHAR);
		logger.debug(DELETE_STATEMENT + " [" + customerPK.getIdPart1() + "][" + customerPK.getIdPart2() + "]");
		preparedStatement.execute();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static void update(CustomerVO customerVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerDAO.class);
		try {
			update(customerVO, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerDAO.class);
		}
	}
	
	public static void update(CustomerVO customerVO, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_STATEMENT);
		preparedStatement.setObject(1, customerVO.getName(), Types.VARCHAR);
		preparedStatement.setObject(2, customerVO.getIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(3, customerVO.getIdPart2(), Types.VARCHAR);
		logger.debug(UPDATE_STATEMENT + " [" + customerVO.getName() + "][" + customerVO.getIdPart1() + "][" + customerVO.getIdPart2() + "]");
		preparedStatement.executeUpdate();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static List<CustomerVO> findAll() throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerDAO.class);
		try {
			return findAll(connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerDAO.class);
		}
	}
	
	public static List<CustomerVO> findAll(Connection connection) throws SQLException {
		Statement statement = connection.createStatement();
		logger.debug(FIND_ALL_STATEMENT);
		ResultSet resultSet = statement.executeQuery(FIND_ALL_STATEMENT);
		List<CustomerVO> customerVOs = new ArrayList<>();
		try {
			while (resultSet.next()) {
				String idPart1 = resultSet.getObject("id_part_1", String.class);
				String idPart2 = resultSet.getObject("id_part_2", String.class);
				String name = resultSet.getObject("name", String.class);
				CustomerPK customerPK = new CustomerPK(idPart1, idPart2);
				CustomerVO customerVO = new CustomerVO(customerPK);
				customerVO.setName(name);
				customerVOs.add(customerVO);
			}
			return customerVOs;
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException ignored) {}}
			try { statement.close(); } catch (SQLException ignored) {}
		}
	}
	
}
