// DO NOT CHANGE THIS FILE MANUALLY!
package de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.dao;

import de.arthurpicht.barnacleGeneratorTest.connectionManager.ConnectionManager;
import java.util.List;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Types;
import de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.vo.CustomerItemVO;
import de.arthurpicht.barnacleGeneratorTest.connectionManager.DataSourceException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.vo.CustomerItemPK;
import de.arthurpicht.barnacleGeneratorTest.connectionManager.EntityNotFoundException;
import de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.vo.ItemVO;
import de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.vo.CustomerVO;
import de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.vo.ItemPK;
import de.arthurpicht.barnacleGeneratorTest.tg_03.tc_03.persistence.vo.CustomerPK;

public class CustomerItemDAO {
	
	private static final Logger logger = LoggerFactory.getLogger(CustomerItemDAO.class);
	
	private static final String CREATE_STATEMENT = "INSERT INTO customer_item (customerIdPart1, customerIdPart2, itemId1, itemId2) VALUES (?, ?, ?, ?)";
	private static final String LOAD_STATEMENT = "SELECT * FROM customer_item WHERE customerIdPart1 = ? AND customerIdPart2 = ? AND itemId1 = ? AND itemId2 = ?";
	private static final String DELETE_STATEMENT = "DELETE FROM customer_item WHERE customerIdPart1 = ? AND customerIdPart2 = ? AND itemId1 = ? AND itemId2 = ?";
	private static final String UPDATE_STATEMENT = "UPDATE customer_item SET  WHERE customerIdPart1 = ? AND customerIdPart2 = ? AND itemId1 = ? AND itemId2 = ?";
	private static final String FIND_ALL_STATEMENT = "SELECT * FROM customer_item";
	private static final String FK_CUSTOMER_STATEMENT = "SELECT * FROM customer_item WHERE customerIdPart1 = ? AND customerIdPart2 = ?";
	private static final String FK_ITEM_STATEMENT = "SELECT * FROM customer_item WHERE itemId1 = ? AND itemId2 = ?";
	private static final String ASSOC_ITEM_STATEMENT = "SELECT t.id1, t.id2, t.description FROM item AS t, customer_item AS a WHERE a.itemId1 = t.id1 AND a.itemId2 = t.id2 AND customerIdPart1 = ? AND customerIdPart2 = ?";
	private static final String ASSOC_CUSTOMER_STATEMENT = "SELECT t.id_part_1, t.id_part_2, t.name FROM customer AS t, customer_item AS a WHERE a.customerIdPart1 = t.id_part_1 AND a.customerIdPart2 = t.id_part_2 AND itemId1 = ? AND itemId2 = ?";
	
	public static void create(CustomerItemVO customerItemVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			create(customerItemVO, connection);
		} catch (SQLException sqlEx) {
			throw new DataSourceException(sqlEx);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static void create(CustomerItemVO customerItemVO, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(CREATE_STATEMENT);
		preparedStatement.setObject(1, customerItemVO.getCustomerIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(2, customerItemVO.getCustomerIdPart2(), Types.VARCHAR);
		preparedStatement.setObject(3, customerItemVO.getItemId1(), Types.VARCHAR);
		preparedStatement.setObject(4, customerItemVO.getItemId2(), Types.VARCHAR);
		logger.debug(CREATE_STATEMENT + " [" + customerItemVO.getCustomerIdPart1() + "][" + customerItemVO.getCustomerIdPart2() + "][" + customerItemVO.getItemId1() + "][" + customerItemVO.getItemId2() + "]");
		preparedStatement.executeUpdate();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static void create(List<CustomerItemVO> customerItemVOs) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			create(customerItemVOs, connection);
		} catch (SQLException sqlEx) {
			throw new DataSourceException(sqlEx);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static void create(List<CustomerItemVO> customerItemVOs, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(CREATE_STATEMENT);
		for (CustomerItemVO customerItemVO : customerItemVOs) {
			preparedStatement.setObject(1, customerItemVO.getCustomerIdPart1(), Types.VARCHAR);
			preparedStatement.setObject(2, customerItemVO.getCustomerIdPart2(), Types.VARCHAR);
			preparedStatement.setObject(3, customerItemVO.getItemId1(), Types.VARCHAR);
			preparedStatement.setObject(4, customerItemVO.getItemId2(), Types.VARCHAR);
			logger.debug(CREATE_STATEMENT + " [" + customerItemVO.getCustomerIdPart1() + "][" + customerItemVO.getCustomerIdPart2() + "][" + customerItemVO.getItemId1() + "][" + customerItemVO.getItemId2() + "]");
			preparedStatement.addBatch();
		}
		preparedStatement.executeBatch();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static CustomerItemVO load(CustomerItemPK customerItemPK) throws DataSourceException, EntityNotFoundException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			return load(customerItemPK, connection);
		} catch(SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static CustomerItemVO load(CustomerItemPK customerItemPK, Connection connection) throws SQLException, EntityNotFoundException {
		PreparedStatement preparedStatement = connection.prepareStatement(LOAD_STATEMENT);
		preparedStatement.setObject(1, customerItemPK.getCustomerIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(2, customerItemPK.getCustomerIdPart2(), Types.VARCHAR);
		preparedStatement.setObject(3, customerItemPK.getItemId1(), Types.VARCHAR);
		preparedStatement.setObject(4, customerItemPK.getItemId2(), Types.VARCHAR);
		logger.debug(LOAD_STATEMENT + " [" + customerItemPK.getCustomerIdPart1() + "][" + customerItemPK.getCustomerIdPart2() + "][" + customerItemPK.getItemId1() + "][" + customerItemPK.getItemId2() + "]");
		ResultSet resultSet = preparedStatement.executeQuery();
		try {
			if (resultSet.next()) {
				CustomerItemVO customerItemVO = new CustomerItemVO(customerItemPK);
				return customerItemVO;
			} else {
				throw new EntityNotFoundException("Entity 'customer_item' with primary key CustomerItemPK = [" + customerItemPK + "] not found!");
			}
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException ignored) {}}
			try { preparedStatement.close(); } catch (SQLException ignored) {}
		}
	}
	
	public static void delete(CustomerItemPK customerItemPK) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			delete(customerItemPK, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static void delete(CustomerItemPK customerItemPK, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(DELETE_STATEMENT);
		preparedStatement.setObject(1, customerItemPK.getCustomerIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(2, customerItemPK.getCustomerIdPart2(), Types.VARCHAR);
		preparedStatement.setObject(3, customerItemPK.getItemId1(), Types.VARCHAR);
		preparedStatement.setObject(4, customerItemPK.getItemId2(), Types.VARCHAR);
		logger.debug(DELETE_STATEMENT + " [" + customerItemPK.getCustomerIdPart1() + "][" + customerItemPK.getCustomerIdPart2() + "][" + customerItemPK.getItemId1() + "][" + customerItemPK.getItemId2() + "]");
		preparedStatement.execute();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static void update(CustomerItemVO customerItemVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			update(customerItemVO, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static void update(CustomerItemVO customerItemVO, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_STATEMENT);
		preparedStatement.setObject(1, customerItemVO.getCustomerIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(2, customerItemVO.getCustomerIdPart2(), Types.VARCHAR);
		preparedStatement.setObject(3, customerItemVO.getItemId1(), Types.VARCHAR);
		preparedStatement.setObject(4, customerItemVO.getItemId2(), Types.VARCHAR);
		logger.debug(UPDATE_STATEMENT + " [" + customerItemVO.getCustomerIdPart1() + "][" + customerItemVO.getCustomerIdPart2() + "][" + customerItemVO.getItemId1() + "][" + customerItemVO.getItemId2() + "]");
		preparedStatement.executeUpdate();
		try { preparedStatement.close(); } catch (SQLException ignored) {}
	}
	
	public static List<CustomerItemVO> findAll() throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			return findAll(connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static List<CustomerItemVO> findAll(Connection connection) throws SQLException {
		Statement statement = connection.createStatement();
		logger.debug(FIND_ALL_STATEMENT);
		ResultSet resultSet = statement.executeQuery(FIND_ALL_STATEMENT);
		List<CustomerItemVO> customerItemVOs = new ArrayList<>();
		try {
			while (resultSet.next()) {
				String customerIdPart1 = resultSet.getObject("customerIdPart1", String.class);
				String customerIdPart2 = resultSet.getObject("customerIdPart2", String.class);
				String itemId1 = resultSet.getObject("itemId1", String.class);
				String itemId2 = resultSet.getObject("itemId2", String.class);
				CustomerItemPK customerItemPK = new CustomerItemPK(customerIdPart1, customerIdPart2, itemId1, itemId2);
				CustomerItemVO customerItemVO = new CustomerItemVO(customerItemPK);
				customerItemVOs.add(customerItemVO);
			}
			return customerItemVOs;
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException ignored) {}}
			try { statement.close(); } catch (SQLException ignored) {}
		}
	}
	
	public static List<CustomerItemVO> findByFk_customer(String customerIdPart1, String customerIdPart2) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			return findByFk_customer(customerIdPart1, customerIdPart2, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static List<CustomerItemVO> findByFk_customer(String customerIdPart1, String customerIdPart2, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(FK_CUSTOMER_STATEMENT);
		preparedStatement.setObject(1, customerIdPart1, Types.VARCHAR);
		preparedStatement.setObject(2, customerIdPart2, Types.VARCHAR);
		logger.debug(FK_CUSTOMER_STATEMENT + " [" + customerIdPart1 + "][" + customerIdPart2 + "]");
		ResultSet resultSet = preparedStatement.executeQuery();
		List<CustomerItemVO> customerItemVOList = new ArrayList<>();
		try {
			while (resultSet.next()) {
				String itemId1 = resultSet.getObject("itemId1", String.class);
				String itemId2 = resultSet.getObject("itemId2", String.class);
				CustomerItemPK customerItemPK = new CustomerItemPK(customerIdPart1, customerIdPart2, itemId1, itemId2);
				CustomerItemVO customerItemVO = new CustomerItemVO(customerItemPK);
				customerItemVOList.add(customerItemVO);
			}
			return customerItemVOList;
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException ignored) {}}
			try { preparedStatement.close(); } catch (SQLException ignored) {}
		}
	}
	
	public static List<CustomerItemVO> findByFk_item(String itemId1, String itemId2) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			return findByFk_item(itemId1, itemId2, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static List<CustomerItemVO> findByFk_item(String itemId1, String itemId2, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(FK_ITEM_STATEMENT);
		preparedStatement.setObject(1, itemId1, Types.VARCHAR);
		preparedStatement.setObject(2, itemId2, Types.VARCHAR);
		logger.debug(FK_ITEM_STATEMENT + " [" + itemId1 + "][" + itemId2 + "]");
		ResultSet resultSet = preparedStatement.executeQuery();
		List<CustomerItemVO> customerItemVOList = new ArrayList<>();
		try {
			while (resultSet.next()) {
				String customerIdPart1 = resultSet.getObject("customerIdPart1", String.class);
				String customerIdPart2 = resultSet.getObject("customerIdPart2", String.class);
				CustomerItemPK customerItemPK = new CustomerItemPK(customerIdPart1, customerIdPart2, itemId1, itemId2);
				CustomerItemVO customerItemVO = new CustomerItemVO(customerItemPK);
				customerItemVOList.add(customerItemVO);
			}
			return customerItemVOList;
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException ignored) {}}
			try { preparedStatement.close(); } catch (SQLException ignored) {}
		}
	}
	
	public static List<ItemVO> getAssociatedItemVO(CustomerVO customerVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			return getAssociatedItemVO(customerVO, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static List<ItemVO> getAssociatedItemVO(CustomerVO customerVO, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(ASSOC_ITEM_STATEMENT);
		preparedStatement.setObject(1, customerVO.getIdPart1(), Types.VARCHAR);
		preparedStatement.setObject(2, customerVO.getIdPart2(), Types.VARCHAR);
		logger.debug(ASSOC_ITEM_STATEMENT + " [" + customerVO.getIdPart1() + "][" + customerVO.getIdPart2() + "]");
		ResultSet resultSet = preparedStatement.executeQuery();
		List<ItemVO> itemVOList = new ArrayList<>();
		try {
			while (resultSet.next()) {
				String id1 = resultSet.getObject("id1", String.class);
				String id2 = resultSet.getObject("id2", String.class);
				String description = resultSet.getObject("description", String.class);
				ItemPK itemPK = new ItemPK(id1, id2);
				ItemVO itemVO = new ItemVO(itemPK);
				itemVO.setDescription(description);
				itemVOList.add(itemVO);
			}
			return itemVOList;
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException ignored) {}}
			try { preparedStatement.close(); } catch (SQLException ignored) {}
		}
	}
	
	public static List<CustomerVO> getAssociatedCustomerVO(ItemVO itemVO) throws DataSourceException {
		Connection connection = ConnectionManager.openConnection(CustomerItemDAO.class);
		try {
			return getAssociatedCustomerVO(itemVO, connection);
		} catch (SQLException e) {
			throw new DataSourceException(e);
		} finally {
			ConnectionManager.releaseConnection(connection, CustomerItemDAO.class);
		}
	}
	
	public static List<CustomerVO> getAssociatedCustomerVO(ItemVO itemVO, Connection connection) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(ASSOC_CUSTOMER_STATEMENT);
		preparedStatement.setObject(1, itemVO.getId1(), Types.VARCHAR);
		preparedStatement.setObject(2, itemVO.getId2(), Types.VARCHAR);
		logger.debug(ASSOC_CUSTOMER_STATEMENT + " [" + itemVO.getId1() + "][" + itemVO.getId2() + "]");
		ResultSet resultSet = preparedStatement.executeQuery();
		List<CustomerVO> customerVOList = new ArrayList<>();
		try {
			while (resultSet.next()) {
				String idPart1 = resultSet.getObject("id_part_1", String.class);
				String idPart2 = resultSet.getObject("id_part_2", String.class);
				String name = resultSet.getObject("name", String.class);
				CustomerPK customerPK = new CustomerPK(idPart1, idPart2);
				CustomerVO customerVO = new CustomerVO(customerPK);
				customerVO.setName(name);
				customerVOList.add(customerVO);
			}
			return customerVOList;
		} finally {
			if (resultSet != null) { try { resultSet.close(); } catch (SQLException ignored) {}}
			try { preparedStatement.close(); } catch (SQLException ignored) {}
		}
	}
	
	public static void addAssociation(CustomerVO customerVO, ItemVO itemVO) throws DataSourceException {
		CustomerItemPK customerItemPK = new CustomerItemPK(customerVO.getIdPart1(), customerVO.getIdPart2(), itemVO.getId1(), itemVO.getId2());
		CustomerItemVO customerItemVO = new CustomerItemVO(customerItemPK);
		CustomerItemDAO.create(customerItemVO);
	}
	
}
